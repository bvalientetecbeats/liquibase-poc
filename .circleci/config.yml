version: 2
jobs:
  update-database-dev:
    working_directory: /tmp/project/
    docker:
      - image: $AWS_ACCOUNT_DEV.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/cicdtools:base-latest
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - checkout     
      - run:
          name: Update RDS DB with Liquibase
          command: |
            set -e
            echo "Getting started with Update RDS DB with Liquibase..."
            echo "Installing liquibase dependencies..."
            ls -lah && pwd
            ls -lah ./liquibase/
            apt-get -qq update -y && apt-get -qq install -y wget tar default-jre       
            cd ./liquibase && mkdir liquibase && cd liquibase
            wget https://github.com/liquibase/liquibase/releases/download/v4.10.0/liquibase-4.10.0.tar.gz
            tar -xvzf liquibase-4.10.0.tar.gz            
            mv $CIRCLE_WORKING_DIRECTORY/liquibase/liquibase /opt/
            ls -lah /opt/liquibase
            export PATH=$PATH:/opt/liquibase/
            liquibase -version
            echo "Updating DataBase..."
            ls -lah $CIRCLE_WORKING_DIRECTORY/liquibase/ && cd $CIRCLE_WORKING_DIRECTORY/liquibase/
            liquibase status --url="jdbc:postgresql://$VAR_RDS_ENDPOINT_DEV:5432/$VAR_RDS_DB_DEV?currentSchema=public&user=$TFVAR_DBUSER_DEV&password=$TFVAR_DBPASSWORD_DEV" --changeLogFile=app-wrapper.xml --username=$TFVAR_DBUSER_DEV --password=$TFVAR_DBPASSWORD_DEV --classpath=postgresql-42.3.5.jar
      - persist_to_workspace:
          root: .
          paths:
            - .
  deploy-ecs-dev:  
    working_directory: /tmp/project/
    docker:
      - image: $AWS_ACCOUNT_DEV.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/cicdtools:base-latest
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - checkout
      - attach_workspace:
          at: .          
      - run:
          name: ECS Deployment to Dev
          command: |
            echo "Setting up environment..."
            TFVAR_environment='dev'
            echo "Setting up AWS credentials..."    
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_DEV
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_DEV
            aws configure set default.region $AWS_DEFAULT_REGION
            echo "Starting terraform init..."
            cd ./terraform-code/$TFVAR_environment/ecs
            terraform init
            echo "Starting terraform plan..."
            terraform plan -out tfapply
            echo "Starting terraform apply..."
            terraform apply -auto-approve tfapply
  promote-to-qa:
    working_directory: /tmp/project/
    docker:
      - image: circleci/python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: 20.10.14        
      - run:
          name: Promote Docker image to QA account
          command: |
            echo "Setting up environment..."
            echo "Installing dependencies..."
            AWS_PAGER=''
            sudo su - root << EOF
            apt-get -qq update -y && apt-get -qq install -y curl unzip
            echo "Configuring AWS CLI 2..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            ./aws/install
            aws --version
            EOF
            echo "Setting up AWS Dev credentials..."    
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_DEV
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_DEV
            aws configure set default.region $AWS_DEFAULT_REGION
            echo "Getting latest Dev image..."
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_DEV.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            docker pull $AWS_ACCOUNT_DEV.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/cicdtools:react-latest
            docker image ls
            echo "Setting up AWS QA credentials..."    
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_TEST
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_TEST
            echo "Setting up ECR QA environment..."
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_QA.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            echo "Tagging and pushing docker image to QA..."
            docker tag $AWS_ACCOUNT_DEV.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/cicdtools:react-latest $AWS_ACCOUNT_QA.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/cicdtools:react-latest            
            echo "Pushing docker image to ECR..."
            docker image ls
            docker push $AWS_ACCOUNT_QA.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/cicdtools:react-latest
            echo "Removing untagged docker images from ECR QA..."
            IMAGES_TO_DELETE=$( aws ecr list-images --region $AWS_DEFAULT_REGION --repository-name cicdtools --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json )
            aws ecr batch-delete-image --no-cli-pager --region $AWS_DEFAULT_REGION --repository-name cicdtools --image-ids "$IMAGES_TO_DELETE" || true
  deploy-ecs-qa:
    working_directory: /tmp/project/
    docker:
      - image: $AWS_ACCOUNT_DEV.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/cicdtools:base-latest
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID_DEV
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY_DEV
    steps:
      - checkout
      - attach_workspace:
          at: .          
      - run:
          name: ECS Deployment to Dev
          command: |
            echo "Setting up environment..."
            TFVAR_environment='qa'
            echo "Setting up AWS credentials..."    
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_TEST
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_TEST
            aws configure set default.region $AWS_DEFAULT_REGION
            echo "Starting terraform init..."
            cd ./terraform-code/$TFVAR_environment/ecs
            terraform init
            echo "Starting terraform plan..."
            terraform plan -out tfapply
            echo "Starting terraform apply..."
            terraform apply -auto-approve tfapply
workflows:
  version: 2
  deploy-python-containerized:
    jobs:
      - update-database-dev